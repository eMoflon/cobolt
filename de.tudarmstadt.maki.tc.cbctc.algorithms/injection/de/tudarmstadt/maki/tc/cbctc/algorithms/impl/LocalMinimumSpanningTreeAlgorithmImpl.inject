import  de.tudarmstadt.maki.tc.cbctc.algorithms.helpers.EdgeWeightComparator;
import  de.tudarmstadt.maki.tc.cbctc.algorithms.io.TopologyModelGraphTWriter;
import  de.tudarmstadt.maki.tc.cbctc.model.Node;
import  java.util.List;
import  java.util.PriorityQueue;
import  java.util.ArrayList;
import  java.util.Collection;
import  java.util.Iterator;
import  java.util.Set;
import  java.util.stream.Collectors;
import  java.util.HashSet;

partial class LocalMinimumSpanningTreeAlgorithmImpl {

@members<--

   private static List<Edge> filterForUnexploredTargets(final List<Edge> edges, final Node selfNode, final Collection<Node> unexploredNodes)
   {
      return edges.stream()//
            .filter(edge -> selfNode.getEdgesInLocalView().contains(edge)) //
            .filter(edge -> unexploredNodes.contains(edge.getTarget())).collect(Collectors.toList());
   }

   private static List<Edge> filterForUnexploredSources(final List<Edge> edges, final Node selfNode, final Collection<Node> unexploredNodes)
   {
      return edges.stream()//
            .filter(edge -> selfNode.getEdgesInLocalView().contains(edge)) //
            .filter(edge -> unexploredNodes.contains(edge.getSource())).collect(Collectors.toList());
   }

   -->

@model buildLmst (Node node, EdgeSet lmst)<--      final Set<Node> unexploredNodes = new HashSet<>();
      node.getEdgesInLocalView().forEach(edge -> {
         unexploredNodes.add(edge.getSource());
         unexploredNodes.add(edge.getTarget());
      });
      final Set<Node> exploredNodes = new HashSet<>();
      final Set<Edge> tentativeLmst = new HashSet<>();
      final PriorityQueue<Edge> priorityQueue = new PriorityQueue<>(new EdgeWeightComparator());

      // The first node is chosen arbitrarily
      priorityQueue.addAll(filterForUnexploredTargets(node.getOutgoingEdges(), node, unexploredNodes));
      priorityQueue.addAll(filterForUnexploredSources(node.getIncomingEdges(), node, unexploredNodes));
      exploredNodes.add(node);
      unexploredNodes.remove(node);

      while (!priorityQueue.isEmpty())
      {
         final Edge firstEdgeInPQ = priorityQueue.poll();
         final Node source = firstEdgeInPQ.getSource();
         final Node target = firstEdgeInPQ.getTarget();
         if (unexploredNodes.contains(target))
         {
            exploredNodes.add(target);
            unexploredNodes.remove(target);
            priorityQueue.addAll(filterForUnexploredTargets(target.getOutgoingEdges(), node, unexploredNodes));
            priorityQueue.addAll(filterForUnexploredSources(target.getIncomingEdges(), node, unexploredNodes));
         } else if (unexploredNodes.contains(source))
         {
            exploredNodes.add(source);
            unexploredNodes.remove(source);
            priorityQueue.addAll(filterForUnexploredTargets(source.getOutgoingEdges(), node, unexploredNodes));
            priorityQueue.addAll(filterForUnexploredSources(source.getIncomingEdges(), node, unexploredNodes));
         } else
         {
            continue;
         }
         tentativeLmst.add(firstEdgeInPQ);
      }
      lmst.getEdges().addAll(tentativeLmst);-->

}