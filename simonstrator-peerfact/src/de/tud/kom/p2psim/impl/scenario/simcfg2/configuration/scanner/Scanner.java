/* The following code was generated by JFlex 1.4.3 on 22.08.13 22:27 */

package de.tud.kom.p2psim.impl.scenario.simcfg2.configuration.scanner;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Map;

import de.tud.kom.p2psim.impl.scenario.simcfg2.configuration.Component;
import de.tud.kom.p2psim.impl.scenario.simcfg2.configuration.SimCfgConfiguration;

/**
 * DO NOT EDIT!
 *
 * This class is generated by JFlex during the maven compile lifecycle
 * using the definition found in simcfg_ast.jflex.
 */


public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SETTING_STRING = 40;
  public static final int VARIATION = 48;
  public static final int ATTRIBUTE_VARIABLE = 38;
  public static final int IMPORT_T = 6;
  public static final int ATTRIBUTE_VALUE = 30;
  public static final int VARIATION_SETTINGS = 52;
  public static final int COMPONENT = 28;
  public static final int VARIATION_SETTING_ARRAY = 58;
  public static final int MAPPING_NAME = 12;
  public static final int SETTING_VARIABLE = 46;
  public static final int VARIATION_NAME = 62;
  public static final int SETTING_ARRAY = 42;
  public static final int INSIDE_TOP_COMPONENT = 24;
  public static final int MAPPING_CLASS = 14;
  public static final int COMPONENT_HEADER = 26;
  public static final int ATTRIBUTE_STRING = 32;
  public static final int VARIATION_FLAGS = 50;
  public static final int VARIATION_SETTING_VALUE = 54;
  public static final int MAPPINGS = 10;
  public static final int CONFIGURATION = 20;
  public static final int IMPORT_EXPR = 8;
  public static final int VARIATION_SETTING_STRING = 56;
  public static final int TOP_COMPONENT = 22;
  public static final int ATTRIBUTE_ARRAY = 34;
  public static final int SETTING_VALUE = 18;
  public static final int ATTRIBUTE_ARRAY_STRING = 36;
  public static final int FLAGS = 2;
  public static final int IMPORTS = 4;
  public static final int YYINITIAL = 0;
  public static final int SETTINGS = 16;
  public static final int VARIATION_SETTING_ARRAY_STRING = 60;
  public static final int SETTING_ARRAY_STRING = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 18, 18, 30, 30
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\2\1\0\1\3\1\1\16\0\4\0\1\30\3\0"+
    "\1\45\2\0\1\32\2\0\1\5\1\0\1\40\2\0\1\4\1\0"+
    "\11\0\1\37\2\0\1\35\1\36\2\0\32\0\1\33\1\0\1\34"+
    "\1\0\1\0\1\0\1\10\1\0\1\24\1\43\1\23\1\6\1\11"+
    "\1\42\1\13\2\0\1\7\1\14\1\22\1\16\1\15\1\0\1\17"+
    "\1\12\1\20\1\25\1\21\1\44\1\0\1\41\1\0\1\31\1\0"+
    "\1\27\1\0\41\0\2\0\4\0\4\0\1\0\2\0\1\0\7\0"+
    "\1\0\4\0\1\0\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0"+
    "\14\0\16\0\5\0\7\0\1\0\1\0\1\0\21\0\160\0\5\0"+
    "\1\0\2\0\2\0\4\0\10\0\1\0\1\0\3\0\1\0\1\0"+
    "\1\0\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\236\0"+
    "\11\0\46\0\2\0\1\0\7\0\47\0\11\0\55\0\1\0\1\0"+
    "\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0\5\0\3\0"+
    "\15\0\4\0\7\0\1\0\4\0\13\0\5\0\53\0\37\0\4\0"+
    "\2\0\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0\2\0"+
    "\1\0\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0\1\0"+
    "\1\0\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0\41\0"+
    "\11\0\2\0\4\0\1\0\5\0\26\0\4\0\1\0\11\0\1\0"+
    "\3\0\1\0\5\0\22\0\31\0\3\0\244\0\4\0\66\0\3\0"+
    "\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0\7\0"+
    "\1\0\7\0\1\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0"+
    "\1\0\7\0\1\0\1\0\3\0\4\0\2\0\1\0\1\0\7\0"+
    "\2\0\2\0\2\0\3\0\1\0\10\0\1\0\4\0\2\0\1\0"+
    "\3\0\2\0\2\0\12\0\4\0\7\0\1\0\5\0\3\0\1\0"+
    "\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0"+
    "\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0"+
    "\1\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0"+
    "\3\0\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0"+
    "\1\0\1\0\17\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0"+
    "\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\7\0"+
    "\2\0\2\0\2\0\3\0\10\0\2\0\4\0\2\0\1\0\3\0"+
    "\2\0\2\0\12\0\1\0\1\0\20\0\1\0\1\0\1\0\6\0"+
    "\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0"+
    "\3\0\2\0\3\0\3\0\3\0\14\0\4\0\5\0\3\0\3\0"+
    "\1\0\4\0\2\0\1\0\6\0\1\0\16\0\12\0\11\0\1\0"+
    "\7\0\3\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0"+
    "\1\0\5\0\3\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0"+
    "\2\0\1\0\2\0\6\0\2\0\2\0\2\0\12\0\22\0\2\0"+
    "\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0"+
    "\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0"+
    "\7\0\1\0\1\0\2\0\2\0\2\0\12\0\1\0\2\0\17\0"+
    "\2\0\1\0\10\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0"+
    "\1\0\3\0\1\0\4\0\1\0\10\0\1\0\10\0\2\0\2\0"+
    "\2\0\12\0\12\0\6\0\2\0\2\0\1\0\22\0\3\0\30\0"+
    "\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0\6\0"+
    "\1\0\1\0\1\0\10\0\22\0\2\0\15\0\60\0\1\0\2\0"+
    "\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0\1\0\1\0"+
    "\2\0\2\0\1\0\1\0\2\0\1\0\6\0\4\0\1\0\7\0"+
    "\1\0\3\0\1\0\1\0\1\0\1\0\2\0\2\0\1\0\4\0"+
    "\1\0\2\0\6\0\1\0\2\0\1\0\2\0\5\0\1\0\1\0"+
    "\1\0\6\0\2\0\12\0\2\0\2\0\42\0\1\0\27\0\2\0"+
    "\6\0\12\0\13\0\1\0\1\0\1\0\1\0\1\0\4\0\2\0"+
    "\10\0\1\0\44\0\4\0\24\0\1\0\2\0\5\0\13\0\1\0"+
    "\44\0\11\0\1\0\71\0\53\0\24\0\1\0\12\0\6\0\6\0"+
    "\4\0\4\0\3\0\1\0\3\0\2\0\7\0\3\0\4\0\15\0"+
    "\14\0\1\0\17\0\2\0\46\0\12\0\53\0\1\0\1\0\3\0"+
    "\u0149\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0"+
    "\51\0\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0"+
    "\103\0\2\0\3\0\40\0\20\0\20\0\125\0\14\0\u026c\0\2\0"+
    "\21\0\1\0\32\0\5\0\113\0\3\0\3\0\17\0\15\0\1\0"+
    "\4\0\3\0\13\0\22\0\3\0\13\0\22\0\2\0\14\0\15\0"+
    "\1\0\3\0\1\0\2\0\14\0\64\0\40\0\3\0\1\0\3\0"+
    "\2\0\1\0\2\0\12\0\41\0\3\0\2\0\12\0\6\0\130\0"+
    "\10\0\51\0\1\0\1\0\5\0\106\0\12\0\35\0\3\0\14\0"+
    "\4\0\14\0\12\0\12\0\36\0\2\0\5\0\13\0\54\0\4\0"+
    "\21\0\7\0\2\0\6\0\12\0\46\0\27\0\5\0\4\0\65\0"+
    "\12\0\1\0\35\0\2\0\13\0\6\0\12\0\15\0\1\0\130\0"+
    "\5\0\57\0\21\0\7\0\4\0\12\0\21\0\11\0\14\0\3\0"+
    "\36\0\12\0\3\0\2\0\12\0\6\0\46\0\16\0\14\0\44\0"+
    "\24\0\10\0\12\0\3\0\3\0\12\0\44\0\122\0\3\0\1\0"+
    "\25\0\4\0\1\0\4\0\1\0\15\0\300\0\47\0\25\0\4\0"+
    "\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0"+
    "\7\0\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0"+
    "\6\0\4\0\15\0\5\0\3\0\1\0\7\0\16\0\5\0\32\0"+
    "\5\0\20\0\2\0\23\0\1\0\13\0\5\0\5\0\6\0\1\0"+
    "\1\0\15\0\1\0\20\0\15\0\3\0\32\0\26\0\15\0\4\0"+
    "\1\0\3\0\14\0\21\0\1\0\4\0\1\0\2\0\12\0\1\0"+
    "\1\0\3\0\5\0\6\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\4\0\1\0\13\0\2\0\4\0\5\0\5\0\4\0\1\0\21\0"+
    "\51\0\u0a77\0\57\0\1\0\57\0\1\0\205\0\6\0\4\0\3\0"+
    "\16\0\46\0\12\0\66\0\11\0\1\0\17\0\1\0\27\0\11\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0"+
    "\3\0\31\0\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0"+
    "\2\0\2\0\2\0\3\0\1\0\132\0\1\0\4\0\5\0\51\0"+
    "\3\0\136\0\21\0\33\0\65\0\20\0\u0200\0\u19b6\0\112\0\u51cc\0"+
    "\64\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0"+
    "\24\0\57\0\1\0\14\0\2\0\1\0\31\0\10\0\120\0\2\0"+
    "\45\0\11\0\2\0\147\0\2\0\4\0\1\0\2\0\16\0\12\0"+
    "\120\0\10\0\1\0\3\0\1\0\4\0\1\0\27\0\5\0\20\0"+
    "\1\0\7\0\64\0\14\0\2\0\62\0\21\0\13\0\12\0\6\0"+
    "\22\0\6\0\3\0\1\0\4\0\12\0\34\0\10\0\2\0\27\0"+
    "\15\0\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0"+
    "\46\0\51\0\16\0\11\0\3\0\1\0\10\0\2\0\2\0\12\0"+
    "\6\0\27\0\3\0\1\0\1\0\4\0\60\0\1\0\1\0\3\0"+
    "\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0\3\0\43\0"+
    "\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0\221\0"+
    "\43\0\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0\27\0"+
    "\4\0\61\0\u2104\0\u012e\0\2\0\76\0\2\0\152\0\46\0\7\0"+
    "\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0"+
    "\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0"+
    "\22\0\100\0\2\0\66\0\50\0\15\0\3\0\20\0\20\0\7\0"+
    "\14\0\2\0\30\0\3\0\31\0\1\0\6\0\5\0\1\0\207\0"+
    "\2\0\1\0\4\0\1\0\13\0\12\0\7\0\32\0\4\0\1\0"+
    "\1\0\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0"+
    "\2\0\3\0\3\0\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\37\0\1\1\2\2\7\1\1\3\2\4\1\2\1\3"+
    "\1\2\1\5\1\1\1\6\1\7\2\10\2\3\1\1"+
    "\1\11\1\1\2\3\1\12\1\13\1\3\1\2\3\3"+
    "\1\14\1\3\2\15\1\2\1\3\1\16\1\17\3\1"+
    "\1\3\2\20\1\2\5\3\1\21\1\3\1\22\1\2"+
    "\1\22\1\1\1\23\1\3\2\24\1\2\3\3\1\25"+
    "\1\26\1\3\1\2\1\27\1\1\1\30\1\5\1\2"+
    "\1\30\1\31\1\32\1\33\1\34\2\3\1\35\1\36"+
    "\1\37\1\40\1\3\2\41\3\3\1\42\1\43\1\44"+
    "\2\1\1\45\1\46\2\47\1\50\2\51\1\52\1\53"+
    "\1\54\1\2\1\55\1\56\10\0\2\3\2\57\2\10"+
    "\2\3\2\60\1\0\6\3\3\0\2\3\1\61\3\3"+
    "\2\22\2\62\5\3\2\30\6\3\2\0\2\63\10\0"+
    "\1\3\1\10\1\3\1\64\3\3\3\0\4\3\1\22"+
    "\4\3\1\30\3\3\3\0\1\63\6\0\1\3\1\10"+
    "\4\3\3\0\3\3\1\65\1\22\3\3\1\66\1\30"+
    "\3\3\2\0\1\67\10\0\1\70\1\3\1\70\1\3"+
    "\1\71\7\0\1\72\1\73\2\3\2\0\1\74\3\0"+
    "\1\75\2\3\1\0\1\76\1\77\2\0\2\100\1\101"+
    "\1\102\4\0\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u049a\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u05f0\0\u0616\0\u049a\0\u063c\0\u0662\0\u0688\0\u049a"+
    "\0\u06ae\0\u049a\0\u049a\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c"+
    "\0\u049a\0\u0792\0\u07b8\0\u07de\0\u049a\0\u049a\0\u0804\0\u082a"+
    "\0\u0850\0\u0876\0\u089c\0\u049a\0\u08c2\0\u08e8\0\u049a\0\u090e"+
    "\0\u0934\0\u049a\0\u049a\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2"+
    "\0\u049a\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u049a"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u049a\0\u0bba\0\u0be0"+
    "\0\u049a\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u049a\0\u049a\0\u0c9e"+
    "\0\u0cc4\0\u049a\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u049a"+
    "\0\u049a\0\u049a\0\u049a\0\u0da8\0\u0dce\0\u049a\0\u049a\0\u049a"+
    "\0\u049a\0\u0df4\0\u0e1a\0\u049a\0\u0e40\0\u0e66\0\u0e8c\0\u049a"+
    "\0\u049a\0\u049a\0\u0eb2\0\u0ed8\0\u049a\0\u049a\0\u0efe\0\u049a"+
    "\0\u049a\0\u0f24\0\u049a\0\u049a\0\u049a\0\u049a\0\u0f4a\0\u049a"+
    "\0\u049a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054"+
    "\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u049a\0\u1112\0\u1138\0\u115e"+
    "\0\u1184\0\u11aa\0\u049a\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u09cc"+
    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u049a\0\u147c"+
    "\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac"+
    "\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u049a"+
    "\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6"+
    "\0\u180c\0\u1832\0\u1858\0\u049a\0\u187e\0\u18a4\0\u18ca\0\u18f0"+
    "\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20"+
    "\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50"+
    "\0\u1b76\0\u1b9c\0\u16dc\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a"+
    "\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48\0\u09cc\0\u1e6e\0\u1e94"+
    "\0\u1eba\0\u1ee0\0\u0bba\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e"+
    "\0\u1fc4\0\u049a\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8"+
    "\0\u20ce\0\u20f4\0\u09cc\0\u211a\0\u0bba\0\u2140\0\u049a\0\u2166"+
    "\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u049a\0\u049a"+
    "\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u049a\0\u2308\0\u232e\0\u2354"+
    "\0\u049a\0\u237a\0\u23a0\0\u23c6\0\u049a\0\u049a\0\u23ec\0\u2412"+
    "\0\u09cc\0\u0bba\0\u049a\0\u049a\0\u2438\0\u245e\0\u2484\0\u24aa"+
    "\0\u049a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\40\1\41\1\42\1\40\1\43\1\40\1\44\3\40"+
    "\1\45\1\46\1\47\4\40\1\50\2\40\1\51\21\40"+
    "\1\52\1\53\1\54\1\55\1\56\21\52\1\57\1\60"+
    "\1\57\1\61\14\52\1\40\1\41\1\42\1\57\1\43"+
    "\21\40\1\57\1\60\1\57\1\61\1\62\1\63\12\40"+
    "\1\64\1\41\1\42\1\64\1\65\25\64\1\60\13\64"+
    "\1\66\1\41\1\42\1\66\1\67\26\66\1\40\1\70"+
    "\11\66\1\40\1\41\1\42\1\57\1\43\21\40\1\57"+
    "\1\60\1\57\1\61\1\71\2\40\1\72\10\40\1\73"+
    "\1\41\1\42\1\73\1\74\25\73\1\75\14\73\1\41"+
    "\1\42\1\73\1\74\25\73\1\76\13\73\1\77\3\100"+
    "\1\101\21\77\1\100\1\102\1\100\1\103\5\77\1\104"+
    "\6\77\1\105\1\106\1\107\1\110\1\111\21\105\1\110"+
    "\1\105\1\57\1\105\1\112\1\113\12\105\1\40\1\41"+
    "\1\42\1\57\1\43\1\40\1\114\3\40\1\115\13\40"+
    "\1\57\1\60\1\57\1\61\10\40\1\116\3\40\1\117"+
    "\1\120\1\121\1\122\1\123\3\117\1\124\3\117\1\125"+
    "\2\117\1\126\6\117\1\122\1\127\1\57\1\130\12\117"+
    "\1\131\1\117\1\132\2\100\1\133\1\134\21\132\1\100"+
    "\1\135\1\100\1\42\5\132\1\136\6\132\1\137\1\140"+
    "\1\141\1\142\1\143\7\137\1\144\2\137\1\145\6\137"+
    "\1\142\1\146\1\57\1\147\12\137\1\150\1\137\1\132"+
    "\1\41\1\42\1\151\1\134\21\132\1\57\1\152\1\57"+
    "\1\153\5\132\1\136\6\132\1\154\1\155\1\60\1\156"+
    "\1\157\21\154\1\156\1\40\1\57\1\40\1\160\1\161"+
    "\11\154\1\162\1\73\1\41\1\42\1\73\1\74\25\73"+
    "\1\163\13\73\1\164\1\41\1\42\1\57\1\165\21\164"+
    "\1\57\1\164\1\57\1\164\1\166\1\164\1\167\3\164"+
    "\1\170\5\164\1\73\1\41\1\42\1\73\1\74\25\73"+
    "\1\171\13\73\1\172\1\173\1\174\1\172\1\175\23\172"+
    "\1\40\15\172\1\176\1\41\1\42\1\176\1\177\23\176"+
    "\1\40\1\176\1\200\13\176\1\164\1\41\1\42\1\57"+
    "\1\165\21\164\1\57\1\164\1\57\1\164\1\201\1\164"+
    "\1\202\3\164\1\170\5\164\1\176\1\41\1\42\1\176"+
    "\1\177\23\176\1\40\1\176\1\171\13\176\1\40\1\41"+
    "\1\42\1\40\1\43\42\40\1\41\1\42\1\57\1\43"+
    "\1\40\1\203\3\40\1\204\13\40\1\57\1\60\1\57"+
    "\1\205\1\206\13\40\1\52\1\207\1\210\1\55\1\56"+
    "\21\52\1\57\1\60\1\57\1\153\14\52\1\77\3\100"+
    "\1\101\21\77\1\100\1\102\1\100\1\103\5\77\1\211"+
    "\6\77\1\105\1\212\1\213\1\110\1\111\21\105\1\110"+
    "\1\105\1\57\1\105\1\214\1\215\12\105\1\73\1\41"+
    "\1\42\1\73\1\74\25\73\1\216\13\73\1\40\1\41"+
    "\1\42\1\217\1\43\21\40\1\217\1\40\1\217\1\40"+
    "\1\220\1\40\1\221\3\40\1\217\5\40\1\73\1\41"+
    "\1\42\1\73\1\74\25\73\1\60\13\73\50\0\1\42"+
    "\47\0\1\222\1\223\47\0\1\224\61\0\1\225\36\0"+
    "\1\226\41\0\1\227\45\0\1\230\53\0\1\231\27\0"+
    "\1\52\2\0\23\52\4\0\14\52\2\0\1\54\43\0"+
    "\1\52\2\0\1\55\22\52\1\57\1\0\1\57\1\0"+
    "\15\52\2\0\1\52\1\232\1\233\20\52\4\0\14\52"+
    "\3\0\1\57\22\0\1\57\1\0\1\57\16\0\1\234"+
    "\1\235\43\0\1\64\2\0\27\64\1\0\14\64\2\0"+
    "\1\64\1\236\1\237\24\64\1\0\13\64\1\66\2\0"+
    "\30\66\2\0\12\66\2\0\1\66\1\240\1\241\25\66"+
    "\2\0\11\66\1\0\1\242\1\243\101\0\1\244\7\0"+
    "\1\73\2\0\27\73\1\0\14\73\2\0\1\73\1\245"+
    "\1\246\24\73\1\0\13\73\1\77\3\0\22\77\1\0"+
    "\1\77\1\0\6\77\1\0\6\77\1\0\3\100\22\0"+
    "\1\100\1\0\1\100\15\0\1\77\3\0\1\247\1\250"+
    "\20\77\1\0\1\77\1\0\6\77\1\0\7\77\1\155"+
    "\1\60\1\0\22\77\1\0\1\77\1\0\6\77\1\0"+
    "\7\77\1\234\1\235\1\0\22\77\1\0\1\77\1\0"+
    "\6\77\1\0\6\77\1\105\2\0\25\105\1\0\1\105"+
    "\2\0\12\105\2\0\1\107\43\0\1\105\2\0\1\110"+
    "\22\105\1\110\1\105\1\57\1\105\2\0\13\105\2\0"+
    "\1\105\1\251\1\252\22\105\1\0\1\105\2\0\12\105"+
    "\10\0\1\253\55\0\1\254\50\0\1\255\22\0\1\117"+
    "\2\0\25\117\2\0\14\117\2\0\1\121\43\0\1\117"+
    "\2\0\1\122\22\117\1\122\1\117\1\57\1\0\15\117"+
    "\2\0\1\117\1\256\1\257\22\117\2\0\15\117\2\0"+
    "\7\117\1\260\15\117\2\0\15\117\2\0\20\117\1\261"+
    "\4\117\2\0\15\117\2\0\20\117\1\262\4\117\2\0"+
    "\15\117\1\155\1\60\25\117\2\0\15\117\2\0\25\117"+
    "\2\0\10\117\1\263\3\117\1\132\2\0\23\132\4\0"+
    "\5\132\1\0\7\132\2\100\1\133\22\132\1\100\1\0"+
    "\1\100\1\0\5\132\1\0\7\132\2\0\1\132\1\264"+
    "\1\265\20\132\4\0\5\132\1\0\6\132\1\0\1\266"+
    "\1\267\43\0\1\137\2\0\24\137\3\0\14\137\2\0"+
    "\1\141\43\0\1\137\2\0\1\142\22\137\1\142\1\0"+
    "\1\57\1\0\15\137\2\0\1\137\1\270\1\271\21\137"+
    "\3\0\15\137\2\0\20\137\1\272\3\137\3\0\15\137"+
    "\2\0\20\137\1\273\3\137\3\0\15\137\2\0\24\137"+
    "\3\0\10\137\1\274\3\137\1\132\2\0\1\151\22\132"+
    "\1\57\1\0\1\57\1\0\5\132\1\0\6\132\1\0"+
    "\1\41\1\42\43\0\1\154\2\0\24\154\5\0\11\154"+
    "\3\0\1\60\43\0\1\154\2\0\1\156\22\154\1\156"+
    "\1\0\1\57\3\0\11\154\1\0\1\154\2\0\1\154"+
    "\1\275\1\276\21\154\5\0\11\154\1\0\1\164\3\0"+
    "\22\164\1\0\1\164\1\0\1\164\1\0\1\164\1\0"+
    "\3\164\1\0\6\164\3\0\1\277\1\300\20\164\1\0"+
    "\1\164\1\0\1\164\1\0\1\164\1\0\3\164\1\0"+
    "\5\164\1\172\2\0\25\172\1\0\15\172\2\0\1\174"+
    "\43\0\1\172\2\0\1\172\1\301\1\302\22\172\1\0"+
    "\15\172\1\176\2\0\25\176\1\0\1\176\1\0\14\176"+
    "\2\0\1\176\1\303\1\304\22\176\1\0\1\176\1\0"+
    "\13\176\7\0\1\305\61\0\1\306\24\0\1\210\45\0"+
    "\1\213\46\0\1\217\22\0\1\217\1\0\1\217\7\0"+
    "\1\217\5\0\1\222\1\307\1\310\43\222\5\311\1\312"+
    "\40\311\10\0\1\313\55\0\1\314\42\0\1\315\45\0"+
    "\1\316\47\0\1\317\50\0\1\320\23\0\1\232\1\307"+
    "\1\310\23\232\4\222\14\232\1\321\2\311\23\321\4\311"+
    "\14\321\2\0\1\235\43\0\1\236\1\307\1\310\27\236"+
    "\1\222\13\236\1\322\2\311\27\322\1\311\13\322\1\240"+
    "\1\307\1\310\30\240\2\222\11\240\1\323\2\311\30\323"+
    "\2\311\11\323\2\0\1\243\73\0\1\244\1\0\1\324"+
    "\13\0\1\245\1\307\1\310\27\245\1\222\13\245\1\325"+
    "\2\311\27\325\1\311\13\325\1\247\1\307\1\310\1\222"+
    "\22\247\1\222\1\247\1\222\6\247\1\222\6\247\1\326"+
    "\3\311\22\326\1\311\1\326\1\311\6\326\1\311\6\326"+
    "\1\251\1\307\1\310\25\251\1\222\1\251\2\222\12\251"+
    "\1\327\2\311\25\327\1\311\1\327\2\311\12\327\24\0"+
    "\1\330\31\0\1\331\44\0\1\332\36\0\1\256\1\307"+
    "\1\310\25\256\2\222\14\256\1\333\2\311\25\333\2\311"+
    "\14\333\1\117\2\0\14\117\1\334\10\117\2\0\15\117"+
    "\2\0\25\117\2\0\11\117\1\335\3\117\2\0\20\117"+
    "\1\336\4\117\2\0\14\117\1\264\1\307\1\310\23\264"+
    "\4\222\5\264\1\222\6\264\1\337\2\311\23\337\4\311"+
    "\5\337\1\311\6\337\2\0\1\267\43\0\1\270\1\307"+
    "\1\310\24\270\3\222\14\270\1\340\2\311\24\340\3\311"+
    "\14\340\1\137\2\0\14\137\1\341\7\137\3\0\15\137"+
    "\2\0\24\137\3\0\11\137\1\342\3\137\2\0\20\137"+
    "\1\343\3\137\3\0\14\137\1\275\1\307\1\310\24\275"+
    "\5\222\11\275\1\222\1\344\2\311\24\344\5\311\11\344"+
    "\1\311\1\277\1\307\1\310\1\222\22\277\1\222\1\277"+
    "\1\222\1\277\1\222\1\277\1\222\3\277\1\222\5\277"+
    "\1\345\3\311\22\345\1\311\1\345\1\311\1\345\1\311"+
    "\1\345\1\311\3\345\1\311\5\345\1\301\1\307\1\310"+
    "\25\301\1\222\15\301\1\346\2\311\25\346\1\311\15\346"+
    "\1\303\1\307\1\310\25\303\1\222\1\303\1\222\13\303"+
    "\1\347\2\311\25\347\1\311\1\347\1\311\13\347\10\0"+
    "\1\350\55\0\1\351\27\0\1\310\43\0\5\311\1\352"+
    "\44\311\1\353\1\352\40\311\11\0\1\354\54\0\1\355"+
    "\43\0\1\356\44\0\1\357\43\0\1\360\40\0\1\361"+
    "\37\0\1\321\2\311\2\321\1\362\20\321\4\311\14\321"+
    "\1\322\2\311\2\322\1\363\24\322\1\311\13\322\1\323"+
    "\2\311\2\323\1\364\25\323\2\311\11\323\1\325\2\311"+
    "\2\325\1\365\24\325\1\311\13\325\1\326\3\311\1\326"+
    "\1\366\20\326\1\311\1\326\1\311\6\326\1\311\6\326"+
    "\1\327\2\311\2\327\1\367\22\327\1\311\1\327\2\311"+
    "\12\327\20\0\1\370\45\0\1\371\42\0\1\372\30\0"+
    "\1\333\2\311\2\333\1\373\22\333\2\311\14\333\1\117"+
    "\2\0\6\117\1\374\16\117\2\0\15\117\2\0\20\117"+
    "\1\375\4\117\2\0\15\117\2\0\17\117\1\376\5\117"+
    "\2\0\14\117\1\337\2\311\2\337\1\377\20\337\4\311"+
    "\5\337\1\311\6\337\1\340\2\311\2\340\1\u0100\21\340"+
    "\3\311\14\340\1\137\2\0\6\137\1\u0101\15\137\3\0"+
    "\15\137\2\0\20\137\1\u0102\3\137\3\0\15\137\2\0"+
    "\17\137\1\u0103\4\137\3\0\14\137\1\344\2\311\2\344"+
    "\1\u0104\21\344\5\311\11\344\1\311\1\345\3\311\1\345"+
    "\1\u0105\20\345\1\311\1\345\1\311\1\345\1\311\1\345"+
    "\1\311\3\345\1\311\5\345\1\346\2\311\2\346\1\u0106"+
    "\22\346\1\311\15\346\1\347\2\311\2\347\1\u0107\22\347"+
    "\1\311\1\347\1\311\13\347\11\0\1\u0108\54\0\1\u0109"+
    "\25\0\4\311\1\310\1\352\40\311\12\0\1\u010a\46\0"+
    "\1\u010b\51\0\1\u010c\41\0\1\u010d\42\0\1\u010e\50\0"+
    "\1\u010f\32\0\1\321\2\311\1\321\1\52\1\362\20\321"+
    "\4\311\14\321\1\322\2\311\1\322\1\64\1\363\24\322"+
    "\1\311\13\322\1\323\2\311\1\323\1\66\1\364\25\323"+
    "\2\311\11\323\1\325\2\311\1\325\1\73\1\365\24\325"+
    "\1\311\13\325\1\326\3\311\1\77\1\366\20\326\1\311"+
    "\1\326\1\311\6\326\1\311\6\326\1\327\2\311\1\327"+
    "\1\105\1\367\22\327\1\311\1\327\2\311\12\327\16\0"+
    "\1\u0110\42\0\1\u0111\55\0\1\u0112\22\0\1\333\2\311"+
    "\1\333\1\117\1\373\22\333\2\311\14\333\1\117\2\0"+
    "\20\117\1\u0113\4\117\2\0\15\117\2\0\3\117\1\u0114"+
    "\21\117\2\0\14\117\1\337\2\311\1\337\1\132\1\377"+
    "\20\337\4\311\5\337\1\311\6\337\1\340\2\311\1\340"+
    "\1\137\1\u0100\21\340\3\311\14\340\1\137\2\0\20\137"+
    "\1\u0115\3\137\3\0\15\137\2\0\3\137\1\u0116\20\137"+
    "\3\0\14\137\1\344\2\311\1\344\1\154\1\u0104\21\344"+
    "\5\311\11\344\1\311\1\345\3\311\1\164\1\u0105\20\345"+
    "\1\311\1\345\1\311\1\345\1\311\1\345\1\311\3\345"+
    "\1\311\5\345\1\346\2\311\1\346\1\172\1\u0106\22\346"+
    "\1\311\15\346\1\347\2\311\1\347\1\176\1\u0107\22\347"+
    "\1\311\1\347\1\311\13\347\12\0\1\u0117\46\0\1\u0118"+
    "\54\0\1\u0119\43\0\1\u011a\47\0\1\u011b\43\0\1\u011c"+
    "\36\0\1\u011d\53\0\1\u011e\52\0\1\u011f\40\0\1\u0120"+
    "\26\0\1\117\2\0\10\117\1\u0121\14\117\2\0\14\117"+
    "\1\137\2\0\10\137\1\u0122\13\137\3\0\14\137\22\0"+
    "\1\u0123\34\0\1\u0124\46\0\1\u0125\44\0\1\u0126\47\0"+
    "\1\u0127\57\0\1\u0128\61\0\1\u0129\4\0\1\117\2\0"+
    "\17\117\1\u012a\5\117\2\0\14\117\1\137\2\0\17\137"+
    "\1\u012b\4\137\3\0\14\137\11\0\1\u012c\46\0\1\u012d"+
    "\45\0\1\u012e\51\0\1\u012f\46\0\1\u0130\26\0\1\117"+
    "\2\0\20\117\1\u0131\4\117\2\0\14\117\1\137\2\0"+
    "\20\137\1\u0132\3\137\3\0\14\137\12\0\1\u0133\55\0"+
    "\1\u0134\33\0\1\u0135\55\0\1\u0136\40\0\1\u0137\50\0"+
    "\1\u0138\51\0\1\u0139\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\37\0\1\11\1\1\1\11\11\1\1\11\3\1\1\11"+
    "\1\1\2\11\5\1\1\11\3\1\2\11\5\1\1\11"+
    "\2\1\1\11\2\1\2\11\5\1\1\11\6\1\1\11"+
    "\5\1\1\11\2\1\1\11\4\1\2\11\2\1\1\11"+
    "\5\1\4\11\2\1\4\11\2\1\1\11\3\1\3\11"+
    "\2\1\2\11\1\1\2\11\1\1\4\11\1\1\2\11"+
    "\10\0\3\1\1\11\5\1\1\11\1\0\6\1\3\0"+
    "\11\1\1\11\15\1\2\0\1\1\1\11\10\0\3\1"+
    "\1\11\3\1\3\0\15\1\3\0\1\1\6\0\6\1"+
    "\3\0\15\1\2\0\1\11\10\0\4\1\1\11\7\0"+
    "\2\11\2\1\2\0\1\11\3\0\1\11\2\1\1\0"+
    "\2\11\2\0\2\1\2\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private ScannerUtils utils = new ScannerUtils(null);
    private String temp = "";
    private String name = "";
    private String filename = "";
    private StringBuilder newLines;

    private static enum Symbol {
        COMPONENT_NAME,
        COMPONENT_HEADER,
        COMPONENT_ALIAS,
        COMPONENT_GUARD,
        FLAGS,
        MAPPINGS,
        IMPORTS,
        SETTINGS,
        CONFIGURATION,
        CURLY_OPEN,
        CURLY_CLOSE,
    }

	//ArrayDeque<Integer> symbolStack = ArrayDeque<Integer>();
	StringBuffer string = new StringBuffer();
	ArrayDeque<Integer> stateStack = new ArrayDeque<Integer>() {{
		add(YYINITIAL);
	}};
	Symbol nextSymbol;

	private void changeState(int state) {
		if (state == COMPONENT_HEADER) nextSymbol = Symbol.COMPONENT_NAME;

		stateStack.push(state);
		yybegin(state);
	}

	private void previousState() {
		stateStack.remove();
		yybegin(stateStack.peek());
	}

	private void previousState(int ignore) {
		for (int i = 0; i < ignore; i++) {
			stateStack.remove();
		}
		yybegin(stateStack.peek());
	}

	private String getCurrentStateName() {
		return getStateName(stateStack.peek());
	}

	private void append(String text) {
		string.append(text);
	}

	/*
	private boolean hasSymbol() {
		return !symbolStack.empty();
	}

	private Symbol symbol() {
		return symbolStack.pop();
	}

	private void addSymbol(Symbol symbol) {
		symbolStack.push(symbol);
	}
	*/

	private String get() {
		String tmp = string.toString();
		string.setLength(0);
		return tmp;
	}

	private static Map<Integer, String> stateMap = new HashMap<Integer, String>();

	public static String getStateName(int stateId) {
		if (stateMap.containsKey(stateId)) {
			return stateMap.get(stateId);
		}

		Field[] fields = Scanner.class.getDeclaredFields();
		for (Field field : fields) {
			Class<?> type = field.getType();
			if (type == int.class && java.lang.reflect.Modifier.isStatic(field.getModifiers()) &&
			java.lang.reflect.Modifier.isFinal(field.getModifiers())) {
				try {
					int id = field.getInt(null);
					if (stateId == id) {
						String name = field.getName();
						stateMap.put(stateId, name);
						return name;
					}
					} catch (IllegalAccessException e) {
						return "Unknown";
					}
			}
		}
		return "Unknown";
	}

	public SimCfgConfiguration getConfig() {
	    return utils.getConfig();
	}

	public void setFilenameForDebug(String filename) {
	    this.filename = filename;
	}

  public static SimCfgConfiguration scanFile(File configFile) {
      Scanner scanner = null;
      try {
          scanner = new Scanner( new java.io.FileReader(configFile) );
          scanner.utils = new ScannerUtils(configFile);
          scanner.setFilenameForDebug(configFile.getName());
          while ( !scanner.zzAtEOF ) scanner.yylex();
      }
      catch (java.io.FileNotFoundException e) {
          System.out.println("File not found: \""+configFile.getAbsolutePath()+"\"");
      }
      catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+configFile.getAbsolutePath()+"\"");
          System.out.println(e);
      }
      catch (Exception e) {
          if (e instanceof RuntimeException) {
              throw (RuntimeException)e;
          } else {
              throw new RuntimeException("", e);
          }
      }

      if (scanner != null) {
          return scanner.getConfig();
      }

      return null;
  }
	
	/*
	public static void main(String argv[]) {
    	if (argv.length == 0) {
    		System.out.println("Usage : java Scanner <inputfile>");
    	} else {
      		for (int i = 0; i < argv.length; i++) {
        		Scanner scanner = null;
    			try {
      				scanner = new Scanner( new java.io.FileReader(argv[i]) );
      				do {
      					Symbol symbol = scanner.next_token();
        				System.out.println("[" + getStateName(symbol.sym) + "] " + symbol.value);
      				} while (!scanner.zzAtEOF);

    			} catch (java.io.FileNotFoundException e) {
      				System.out.println("File not found : \""+argv[i]+"\"");
    			} catch (java.io.IOException e) {
      				System.out.println("IO error scanning file \""+argv[i]+"\"");
      				System.out.println(e);
    			} catch (Exception e) {
      				System.out.println("Unexpected exception:");
      				e.printStackTrace();
    			}
  			}
    	}
  	}*/
  	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { changeState(SETTINGS);
          }
        case 68: break;
        case 25: 
          { changeState(ATTRIBUTE_STRING);
          }
        case 69: break;
        case 5: 
          { previousState();
          }
        case 70: break;
        case 42: 
          { changeState(VARIATION_SETTING_STRING); string.setLength(0);
          }
        case 71: break;
        case 27: 
          { changeState(ATTRIBUTE_VARIABLE);
          }
        case 72: break;
        case 20: 
          { if (nextSymbol == null) {
			nextSymbol = Symbol.COMPONENT_NAME;
			utils.walkUpComponent();
			previousState();
		} else {
			changeState(COMPONENT);
		}
          }
        case 73: break;
        case 12: 
          { changeState(SETTING_VALUE); temp = get();
          }
        case 74: break;
        case 19: 
          { changeState(ATTRIBUTE_VALUE); temp = get();
          }
        case 75: break;
        case 26: 
          { changeState(ATTRIBUTE_ARRAY); utils.newArray();
          }
        case 76: break;
        case 65: 
          { changeState(VARIATION_SETTINGS);
          }
        case 77: break;
        case 56: 
          { utils.setComponentMerge();
          }
        case 78: break;
        case 41: 
          { previousState(); if (string.length() > 0) utils.addVariationSetting(name, temp, get());
          }
        case 79: break;
        case 60: 
          { changeState(IMPORTS);
          }
        case 80: break;
        case 9: 
          { changeState(MAPPING_NAME); string.setLength(0);
          }
        case 81: break;
        case 23: 
          { previousState(2);
			utils.walkUpComponent();
          }
        case 82: break;
        case 66: 
          { changeState(VARIATION);
          }
        case 83: break;
        case 1: 
          { throw new Error("Illegal character <"+ yytext()+"> (l:" + (yyline+1) + ", c:" + (yycolumn+1) + ") in state " + getCurrentStateName() + " of file " + this.filename);
          }
        case 84: break;
        case 49: 
          { nextSymbol = Symbol.COMPONENT_ALIAS; utils.setComponentName(get());
          }
        case 85: break;
        case 17: 
          { if (nextSymbol == Symbol.COMPONENT_NAME) {
	        utils.setComponentName(get());
	    } else if (nextSymbol == Symbol.COMPONENT_ALIAS) {
	        utils.setComponentAlias(get());
	    } else if (nextSymbol == Symbol.COMPONENT_GUARD) {
	        utils.setComponentGuard(get());
	    }
          }
        case 86: break;
        case 50: 
          { previousState(2);
	    //utils.walkUpComponent();
          }
        case 87: break;
        case 58: 
          { changeState(TOP_COMPONENT); nextSymbol = Symbol.COMPONENT_NAME; utils.newComponent(Component.ComponentType.STATIC);
          }
        case 88: break;
        case 8: 
          { append(yytext()); utils.addImport(get());
          }
        case 89: break;
        case 7: 
          { changeState(IMPORT_EXPR); string.setLength(0);
          }
        case 90: break;
        case 39: 
          { utils.addVariationFlag(name, get());
          }
        case 91: break;
        case 53: 
          { Symbol oldSymbol = nextSymbol;
	    nextSymbol = Symbol.COMPONENT_GUARD;
	    if (oldSymbol == Symbol.COMPONENT_NAME) {
	        utils.setComponentName(get());
	    } else if (oldSymbol == Symbol.COMPONENT_ALIAS) {
            utils.setComponentAlias(get());
	    }
          }
        case 92: break;
        case 6: 
          { changeState(IMPORT_T); string.setLength(0);
          }
        case 93: break;
        case 51: 
          { char[] ch;
    ch = yytext().toCharArray();
    newLines = new StringBuilder();
    for (char c : ch)
    {
        if (c == '\n')
        {
            newLines.append(c);
        }
    }
          }
        case 94: break;
        case 24: 
          { append(yytext()); utils.addAttribute(temp, get());
          }
        case 95: break;
        case 67: 
          { changeState(CONFIGURATION);
          }
        case 96: break;
        case 14: 
          { changeState(SETTING_STRING); string.setLength(0);
          }
        case 97: break;
        case 13: 
          { previousState(); if (string.length() > 0) utils.addSetting(temp, get());
          }
        case 98: break;
        case 43: 
          { changeState(VARIATION_SETTING_ARRAY); string.setLength(0); utils.newArray();
          }
        case 99: break;
        case 30: 
          { previousState(); if (string.length() > 0) utils.addToArray(get()); string.setLength(0); utils.addAttribute(temp, utils.getArray());
          }
        case 100: break;
        case 16: 
          { string.setLength(0); changeState(INSIDE_TOP_COMPONENT);
          }
        case 101: break;
        case 34: 
          { previousState(); utils.addSetting(temp, get());
          }
        case 102: break;
        case 31: 
          { if (string.length() > 0) utils.addToArray(get());
          }
        case 103: break;
        case 4: 
          { if (string.length() > 0) utils.addFlag(get());
          }
        case 104: break;
        case 3: 
          { append(yytext());
          }
        case 105: break;
        case 18: 
          { if (string.length() > 0) {
			String tmp = get();
			append(yytext());
			changeState(COMPONENT_HEADER);
			utils.newComponent(Component.ComponentType.COMPONENT);
			utils.setComponentSetter(tmp);
		} else {
		    append(yytext());
		}
          }
        case 106: break;
        case 11: 
          { previousState(); utils.addMapping(temp, get());
          }
        case 107: break;
        case 61: 
          { changeState(TOP_COMPONENT); nextSymbol = Symbol.COMPONENT_NAME; utils.newComponent(Component.ComponentType.FACTORY);
          }
        case 108: break;
        case 47: 
          { string.setLength(0);
          }
        case 109: break;
        case 21: 
          { nextSymbol = null;
          }
        case 110: break;
        case 40: 
          { changeState(VARIATION_SETTING_VALUE); temp = get();
          }
        case 111: break;
        case 10: 
          { previousState(); temp = get();
          }
        case 112: break;
        case 63: 
          { changeState(MAPPINGS);
          }
        case 113: break;
        case 59: 
          { changeState(TOP_COMPONENT); nextSymbol = Symbol.COMPONENT_NAME; utils.newComponent(Component.ComponentType.HELPER);
          }
        case 114: break;
        case 29: 
          { changeState(ATTRIBUTE_ARRAY_STRING); string.setLength(0);
          }
        case 115: break;
        case 44: 
          { previousState(); utils.addVariationSetting(name, temp, get());
          }
        case 116: break;
        case 22: 
          { if (nextSymbol == Symbol.COMPONENT_NAME) {
            utils.setComponentName(get());
        } else if (nextSymbol == Symbol.COMPONENT_ALIAS) {
            utils.setComponentAlias(get());
        } else if (nextSymbol == Symbol.COMPONENT_GUARD) {
            utils.setComponentGuard(get());
        }
          }
        case 117: break;
        case 28: 
          { previousState(); utils.addAttribute(temp, get());
          }
        case 118: break;
        case 48: 
          { previousState(); utils.setLastImportGuard(get());
          }
        case 119: break;
        case 15: 
          { changeState(SETTING_ARRAY); string.setLength(0); utils.newArray();
          }
        case 120: break;
        case 45: 
          { changeState(VARIATION_SETTING_ARRAY_STRING); string.setLength(0);
          }
        case 121: break;
        case 54: 
          { nextSymbol = Symbol.COMPONENT_GUARD;
		utils.setComponentName(get());
          }
        case 122: break;
        case 38: 
          { changeState(VARIATION_NAME);
          }
        case 123: break;
        case 52: 
          { changeState(MAPPING_CLASS); string.setLength(0);
          }
        case 124: break;
        case 32: 
          { previousState(); utils.addToArray(get());
          }
        case 125: break;
        case 57: 
          { changeState(VARIATION_FLAGS);
          }
        case 126: break;
        case 37: 
          { name = get();
          }
        case 127: break;
        case 55: 
          { changeState(FLAGS);
          }
        case 128: break;
        case 35: 
          { changeState(SETTING_ARRAY_STRING); string.setLength(0);
          }
        case 129: break;
        case 46: 
          { previousState(); string.setLength(0); utils.addVariationSetting(name, temp, utils.getArray());
          }
        case 130: break;
        case 36: 
          { previousState();  if (string.length() > 0) utils.addToArray(get()); string.setLength(0); utils.addSetting(temp, utils.getArray());
          }
        case 131: break;
        case 33: 
          { previousState(2); utils.addAttribute(temp, "$" + get());
          }
        case 132: break;
        case 64: 
          { utils.setComponentRedefine();
          }
        case 133: break;
        case 2: 
          { 
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
